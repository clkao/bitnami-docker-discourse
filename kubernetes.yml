apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.service.type: nodeport
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: discourse
    name: discourse
  spec:
    ports:
    - name: "80"
      port: 80
      targetPort: 3000
    selector:
      io.kompose.service: discourse
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: postgresql
    name: postgresql
  spec:
    clusterIP: None
    ports:
    - name: headless
      port: 55555
      targetPort: 0
    selector:
      io.kompose.service: postgresql
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    clusterIP: None
    ports:
    - name: headless
      port: 55555
      targetPort: 0
    selector:
      io.kompose.service: redis
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: sidekiq
    name: sidekiq
  spec:
    clusterIP: None
    ports:
    - name: headless
      port: 55555
      targetPort: 0
    selector:
      io.kompose.service: sidekiq
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.service.type: nodeport
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: discourse
    name: discourse
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: discourse
      spec:
        containers:
        - env:
          - name: DISCOURSE_POSTGRESQL_NAME
            value: bitnami_application
          - name: DISCOURSE_POSTGRESQL_PASSWORD
            value: bitnami1
          - name: DISCOURSE_POSTGRESQL_USERNAME
            value: bn_discourse
          - name: POSTGRESQL_CLIENT_CREATE_DATABASE_NAME
            value: bitnami_application
          - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
            value: bitnami1
          - name: POSTGRESQL_CLIENT_CREATE_DATABASE_USERNAME
            value: bn_discourse
          - name: POSTGRESQL_HOST
            value: postgresql
          - name: POSTGRESQL_ROOT_USER
            value: postgres
          image: bitnami/discourse:latest
          name: discourse
          ports:
          - containerPort: 3000
          resources: {}
          volumeMounts:
          - mountPath: /bitnami
            name: bitnamidockerdiscourse-discourse-data
        restartPolicy: Always
        volumes:
        - name: bitnamidockerdiscourse-discourse-data
          persistentVolumeClaim:
            claimName: bitnamidockerdiscourse-discourse-data
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: bitnamidockerdiscourse-discourse-data
    name: bitnamidockerdiscourse-discourse-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: postgresql
    name: postgresql
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: postgresql
      spec:
        containers:
        - image: bitnami/postgresql:9.6
          name: postgresql
          resources: {}
          volumeMounts:
          - mountPath: /bitnami
            name: bitnamidockerdiscourse-postgresql-data
        restartPolicy: Always
        volumes:
        - name: bitnamidockerdiscourse-postgresql-data
          persistentVolumeClaim:
            claimName: bitnamidockerdiscourse-postgresql-data
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: bitnamidockerdiscourse-postgresql-data
    name: bitnamidockerdiscourse-postgresql-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: redis
      spec:
        containers:
        - env:
          - name: ALLOW_EMPTY_PASSWORD
            value: "yes"
          image: bitnami/redis:latest
          name: redis
          resources: {}
          volumeMounts:
          - mountPath: /bitnami
            name: bitnamidockerdiscourse-redis-data
        restartPolicy: Always
        volumes:
        - name: bitnamidockerdiscourse-redis-data
          persistentVolumeClaim:
            claimName: bitnamidockerdiscourse-redis-data
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: bitnamidockerdiscourse-redis-data
    name: bitnamidockerdiscourse-redis-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o kubernetes.yml
      kompose.version: 1.6.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: sidekiq
    name: sidekiq
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: sidekiq
      spec:
        containers:
        - args:
          - nami
          - start
          - --foreground
          - discourse-sidekiq
          env:
          - name: DISCOURSE_HOST
            value: discourse
          - name: DISCOURSE_PORT
            value: "3000"
          - name: DISCOURSE_POSTGRESQL_NAME
            value: bitnami_application
          - name: DISCOURSE_POSTGRESQL_PASSWORD
            value: bitnami1
          - name: DISCOURSE_POSTGRESQL_USERNAME
            value: bn_discourse
          image: bitnami/discourse:latest
          name: sidekiq
          resources: {}
          volumeMounts:
          - mountPath: /bitnami
            name: bitnamidockerdiscourse-sidekiq-data
        restartPolicy: Always
        volumes:
        - name: bitnamidockerdiscourse-sidekiq-data
          persistentVolumeClaim:
            claimName: bitnamidockerdiscourse-sidekiq-data
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: bitnamidockerdiscourse-sidekiq-data
    name: bitnamidockerdiscourse-sidekiq-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
kind: List
metadata: {}

